#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PARALLEL_JOBS=${PRE_COMMIT_PARALLEL:-4}
USE_CACHE=${PRE_COMMIT_CACHE:-true}
CACHE_DIR="/tmp/rpg-toolkit-precommit-cache"
VERBOSE=${PRE_COMMIT_VERBOSE:-false}

echo "🔍 Running pre-commit checks..."

# Debug info if verbose
if [[ "$VERBOSE" == "true" ]]; then
    echo -e "${CYAN}Config: PARALLEL=$PARALLEL_JOBS, CACHE=$USE_CACHE${NC}"
fi

# Get list of changed Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$STAGED_GO_FILES" ]; then
    echo "No Go files staged for commit"
    exit 0
fi

# Function to find module root for a file
get_module_root() {
    local file=$1
    local dir=$(dirname "$file")
    while [[ ! -f "$dir/go.mod" && "$dir" != "." && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")
    done
    if [[ -f "$dir/go.mod" ]]; then
        echo "$dir"
    fi
}

# Find all modules with changes
CHANGED_MODULES=$(for file in $STAGED_GO_FILES; do
    get_module_root "$file"
done | sort -u | grep -v '^$')

if [ -z "$CHANGED_MODULES" ]; then
    echo -e "${RED}Warning: Changed Go files but no go.mod found${NC}"
    exit 1
fi

# Count modules
MODULE_COUNT=$(echo "$CHANGED_MODULES" | wc -l)
echo -e "${BLUE}Found changes in $MODULE_COUNT module(s)${NC}"

# Create cache directory if needed
if [[ "$USE_CACHE" == "true" ]]; then
    mkdir -p "$CACHE_DIR"
fi

# Function to get cache key for a module
get_cache_key() {
    local module=$1
    # Get hash of all Go files in changed packages
    local MODULE_FILES=$(echo "$STAGED_GO_FILES" | grep "^$module/" || true)
    local PACKAGES=$(echo "$MODULE_FILES" | xargs -I {} dirname {} | sort -u)
    local FILE_HASH=$(cd "$module" && find $PACKAGES -name "*.go" -type f 2>/dev/null | xargs md5sum 2>/dev/null | md5sum | cut -d' ' -f1)
    echo "$FILE_HASH"
}

# Function to check a single module
check_module() {
    local module=$1
    local module_name=$(basename "$module")
    
    # Check cache if enabled
    if [[ "$USE_CACHE" == "true" ]]; then
        local cache_key=$(get_cache_key "$module")
        local cache_file="$CACHE_DIR/${module_name}-${cache_key}"
        
        if [[ -f "$cache_file" ]]; then
            echo -e "${GREEN}✓ Module $module_name (cached)${NC}"
            return 0
        fi
    fi
    
    echo -e "\n${YELLOW}Checking module: $module_name${NC}"
    
    # Get changed files in this module
    local MODULE_FILES=$(echo "$STAGED_GO_FILES" | grep "^$module/" || true)
    if [ -z "$MODULE_FILES" ]; then
        return 0
    fi
    
    # Get unique packages (directories) with changes
    local MODULE_PACKAGES=$(echo "$MODULE_FILES" | xargs -I {} dirname {} | sort -u | sed "s|^$module||" | sed 's|^/||' | sed 's|^|./|')
    
    # Track if this module passes all checks
    local module_passed=true
    
    # Format check
    echo "→ Formatting Go code..."
    if ! (cd "$module" && go fmt $MODULE_PACKAGES); then
        module_passed=false
    fi
    
    # Check if module has a go.mod that needs tidying
    if [[ -f "$module/go.mod" ]]; then
        echo "→ Running go mod tidy..."
        if ! (cd "$module" && go mod tidy); then
            module_passed=false
        fi
    fi
    
    # Linter check - only on changed packages
    echo "→ Running linter on changed packages..."
    if command -v golangci-lint &> /dev/null; then
        if ! (cd "$module" && golangci-lint run $MODULE_PACKAGES); then
            module_passed=false
        fi
    else
        echo "⚠️  golangci-lint not found, skipping linter checks"
    fi
    
    # Run tests only on changed packages (faster)
    echo "→ Running tests on changed packages..."
    if ! (cd "$module" && go test -race $MODULE_PACKAGES); then
        module_passed=false
    fi
    
    if [[ "$module_passed" == "true" ]]; then
        echo -e "${GREEN}✓ Module $module_name passed all checks${NC}"
        
        # Cache success if enabled
        if [[ "$USE_CACHE" == "true" ]]; then
            touch "$cache_file"
        fi
        return 0
    else
        echo -e "${RED}✗ Module $module_name failed checks${NC}"
        return 1
    fi
}

# Export the function for parallel execution
export -f check_module get_cache_key
export STAGED_GO_FILES USE_CACHE CACHE_DIR

# Check if we should run in parallel
if [[ $MODULE_COUNT -gt 1 && $PARALLEL_JOBS -gt 1 ]]; then
    echo -e "${CYAN}Running checks in parallel (max $PARALLEL_JOBS jobs)...${NC}"
    
    # Run checks in parallel and collect results
    FAILED_MODULES=$(echo "$CHANGED_MODULES" | xargs -P "$PARALLEL_JOBS" -I {} bash -c 'check_module "$@" || echo "$@"' _ {} | grep -v '^$' || true)
else
    # Run sequentially
    FAILED_MODULES=""
    for module in $CHANGED_MODULES; do
        if ! check_module "$module"; then
            FAILED_MODULES="$FAILED_MODULES $module"
        fi
    done
fi

# Check if any files were modified by formatting or go mod tidy
echo -e "\n${YELLOW}Checking for modifications...${NC}"
MODIFIED=$(git diff --name-only)

if [ -n "$MODIFIED" ]; then
    echo -e "\n${RED}❌ The following files were modified by formatting/tidying:${NC}"
    echo "$MODIFIED" | sed 's/^/  /'
    echo -e "\n${YELLOW}Please stage these changes and commit again:${NC}"
    echo -e "${BLUE}  git add -u${NC}"
    
    # Clear cache for modified modules
    if [[ "$USE_CACHE" == "true" ]]; then
        for file in $MODIFIED; do
            module=$(get_module_root "$file")
            if [ -n "$module" ]; then
                module_name=$(basename "$module")
                rm -f "$CACHE_DIR/${module_name}-"*
            fi
        done
    fi
    
    exit 1
fi

# Check if any modules failed
if [ -n "$FAILED_MODULES" ]; then
    echo -e "\n${RED}❌ The following modules failed checks:${NC}"
    echo "$FAILED_MODULES" | tr ' ' '\n' | grep -v '^$' | sed 's/^/  /'
    
    # Clear cache for failed modules
    if [[ "$USE_CACHE" == "true" ]]; then
        for module in $FAILED_MODULES; do
            module_name=$(basename "$module")
            rm -f "$CACHE_DIR/${module_name}-"*
        done
    fi
    
    exit 1
fi

# Clean up old cache entries (older than 1 day)
if [[ "$USE_CACHE" == "true" ]]; then
    find "$CACHE_DIR" -type f -mtime +1 -delete 2>/dev/null || true
fi

echo -e "\n${GREEN}✅ All pre-commit checks passed!${NC}"
echo -e "${BLUE}Changed modules checked: $(echo "$CHANGED_MODULES" | wc -l)${NC}"
echo -e "${BLUE}Total files checked: $(echo "$STAGED_GO_FILES" | wc -l)${NC}"

# Show cache statistics if verbose
if [[ "$VERBOSE" == "true" && "$USE_CACHE" == "true" ]]; then
    CACHE_HITS=$(find "$CACHE_DIR" -type f -mmin -5 2>/dev/null | wc -l || echo 0)
    echo -e "${CYAN}Cache hits in last 5 minutes: $CACHE_HITS${NC}"
fi