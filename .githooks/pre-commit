#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "üîç Running pre-commit checks..."

# Get list of changed Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [ -z "$STAGED_GO_FILES" ]; then
    echo "No Go files staged for commit"
    exit 0
fi

# Function to find module root for a file
get_module_root() {
    local file=$1
    local dir=$(dirname "$file")
    while [[ ! -f "$dir/go.mod" && "$dir" != "." && "$dir" != "/" ]]; do
        dir=$(dirname "$dir")
    done
    if [[ -f "$dir/go.mod" ]]; then
        echo "$dir"
    fi
}

# Find all modules with changes
CHANGED_MODULES=$(for file in $STAGED_GO_FILES; do
    get_module_root "$file"
done | sort -u | grep -v '^$')

if [ -z "$CHANGED_MODULES" ]; then
    echo -e "${RED}Warning: Changed Go files but no go.mod found${NC}"
    exit 1
fi

# Count modules
MODULE_COUNT=$(echo "$CHANGED_MODULES" | wc -l)
echo -e "${BLUE}Found changes in $MODULE_COUNT module(s)${NC}"

# Function to check a single module
check_module() {
    local module=$1
    local module_name=$(basename "$module")
    
    echo -e "\n${YELLOW}Checking module: $module_name${NC}"
    
    # Get changed files in this module
    local MODULE_FILES=$(echo "$STAGED_GO_FILES" | grep "^$module/" || true)
    if [ -z "$MODULE_FILES" ]; then
        return 0
    fi
    
    # Get unique packages (directories) with changes
    local MODULE_PACKAGES=$(echo "$MODULE_FILES" | xargs -I {} dirname {} | sort -u | sed "s|^$module||" | sed 's|^/||' | sed 's|^|./|')
    
    # Format check
    echo "‚Üí Formatting Go code..."
    (cd "$module" && go fmt $MODULE_PACKAGES)
    
    # Check if module has a go.mod that needs tidying
    if [[ -f "$module/go.mod" ]]; then
        echo "‚Üí Running go mod tidy..."
        (cd "$module" && go mod tidy)
    fi
    
    # Linter check - only on changed packages
    echo "‚Üí Running linter on changed packages..."
    if command -v golangci-lint &> /dev/null; then
        (cd "$module" && golangci-lint run $MODULE_PACKAGES) || return 1
    else
        echo "‚ö†Ô∏è  golangci-lint not found, skipping linter checks"
    fi
    
    # Run tests only on changed packages (faster)
    echo "‚Üí Running tests on changed packages..."
    (cd "$module" && go test -race $MODULE_PACKAGES) || return 1
    
    echo -e "${GREEN}‚úì Module $module_name passed all checks${NC}"
}

# Track if any module failed
FAILED_MODULES=""

# Check each module
for module in $CHANGED_MODULES; do
    if ! check_module "$module"; then
        FAILED_MODULES="$FAILED_MODULES $module"
    fi
done

# Check if any files were modified by formatting or go mod tidy
echo -e "\n${YELLOW}Checking for modifications...${NC}"
MODIFIED=$(git diff --name-only)

if [ -n "$MODIFIED" ]; then
    echo -e "\n${RED}‚ùå The following files were modified by formatting/tidying:${NC}"
    echo "$MODIFIED" | sed 's/^/  /'
    echo -e "\n${YELLOW}Please stage these changes and commit again:${NC}"
    echo -e "${BLUE}  git add -u${NC}"
    exit 1
fi

# Check if any modules failed
if [ -n "$FAILED_MODULES" ]; then
    echo -e "\n${RED}‚ùå The following modules failed checks:${NC}"
    echo "$FAILED_MODULES" | tr ' ' '\n' | grep -v '^$' | sed 's/^/  /'
    exit 1
fi

echo -e "\n${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo -e "${BLUE}Changed modules checked: $(echo "$CHANGED_MODULES" | wc -l)${NC}"
echo -e "${BLUE}Total files checked: $(echo "$STAGED_GO_FILES" | wc -l)${NC}"