// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/dice (interfaces: Roller)
//
// Generated by this command:
//
//	mockgen -destination=dice/mock/mock_roller.go -package=mock_dice github.com/KirkDiggler/rpg-toolkit/dice Roller
//

// Package mock_dice is a generated GoMock package.
package mock_dice

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoller is a mock of Roller interface.
type MockRoller struct {
	ctrl     *gomock.Controller
	recorder *MockRollerMockRecorder
	isgomock struct{}
}

// MockRollerMockRecorder is the mock recorder for MockRoller.
type MockRollerMockRecorder struct {
	mock *MockRoller
}

// NewMockRoller creates a new mock instance.
func NewMockRoller(ctrl *gomock.Controller) *MockRoller {
	mock := &MockRoller{ctrl: ctrl}
	mock.recorder = &MockRollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoller) EXPECT() *MockRollerMockRecorder {
	return m.recorder
}

// Roll mocks base method.
func (m *MockRoller) Roll(size int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll", size)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roll indicates an expected call of Roll.
func (mr *MockRollerMockRecorder) Roll(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockRoller)(nil).Roll), size)
}

// RollN mocks base method.
func (m *MockRoller) RollN(count, size int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollN", count, size)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollN indicates an expected call of RollN.
func (mr *MockRollerMockRecorder) RollN(count, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollN", reflect.TypeOf((*MockRoller)(nil).RollN), count, size)
}
