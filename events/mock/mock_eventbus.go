// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/events (interfaces: EventBus)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_eventbus.go -package=mock github.com/KirkDiggler/rpg-toolkit/events EventBus
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
)

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
	isgomock struct{}
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockEventBus) Clear(eventType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", eventType)
}

// Clear indicates an expected call of Clear.
func (mr *MockEventBusMockRecorder) Clear(eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockEventBus)(nil).Clear), eventType)
}

// ClearAll mocks base method.
func (m *MockEventBus) ClearAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAll")
}

// ClearAll indicates an expected call of ClearAll.
func (mr *MockEventBusMockRecorder) ClearAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAll", reflect.TypeOf((*MockEventBus)(nil).ClearAll))
}

// Publish mocks base method.
func (m *MockEventBus) Publish(ctx context.Context, event events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBusMockRecorder) Publish(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBus)(nil).Publish), ctx, event)
}

// Subscribe mocks base method.
func (m *MockEventBus) Subscribe(eventType string, handler events.Handler) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", eventType, handler)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBusMockRecorder) Subscribe(eventType, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBus)(nil).Subscribe), eventType, handler)
}

// SubscribeFunc mocks base method.
func (m *MockEventBus) SubscribeFunc(eventType string, priority int, fn events.HandlerFunc) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFunc", eventType, priority, fn)
	ret0, _ := ret[0].(string)
	return ret0
}

// SubscribeFunc indicates an expected call of SubscribeFunc.
func (mr *MockEventBusMockRecorder) SubscribeFunc(eventType, priority, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFunc", reflect.TypeOf((*MockEventBus)(nil).SubscribeFunc), eventType, priority, fn)
}

// Unsubscribe mocks base method.
func (m *MockEventBus) Unsubscribe(subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockEventBusMockRecorder) Unsubscribe(subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockEventBus)(nil).Unsubscribe), subscriptionID)
}
