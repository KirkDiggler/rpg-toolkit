// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/conditions (interfaces: Condition)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_condition.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/conditions Condition
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	events "github.com/KirkDiggler/rpg-toolkit/events"
)

// MockCondition is a mock of Condition interface.
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockConditionMockRecorder
	isgomock struct{}
}

// MockConditionMockRecorder is the mock recorder for MockCondition.
type MockConditionMockRecorder struct {
	mock *MockCondition
}

// NewMockCondition creates a new mock instance.
func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &MockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCondition) EXPECT() *MockConditionMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCondition) Apply(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockConditionMockRecorder) Apply(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCondition)(nil).Apply), bus)
}

// GetID mocks base method.
func (m *MockCondition) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockConditionMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockCondition)(nil).GetID))
}

// GetType mocks base method.
func (m *MockCondition) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockConditionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockCondition)(nil).GetType))
}

// IsActive mocks base method.
func (m *MockCondition) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockConditionMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockCondition)(nil).IsActive))
}

// Remove mocks base method.
func (m *MockCondition) Remove(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockConditionMockRecorder) Remove(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCondition)(nil).Remove), bus)
}

// Source mocks base method.
func (m *MockCondition) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockConditionMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockCondition)(nil).Source))
}

// Target mocks base method.
func (m *MockCondition) Target() core.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(core.Entity)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockConditionMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockCondition)(nil).Target))
}
