// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/conditions (interfaces: Condition)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_condition.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/conditions Condition
//

// Package mock is a generated GoMock package.
package mock

import (
	json "encoding/json"
	reflect "reflect"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	events "github.com/KirkDiggler/rpg-toolkit/events"
	conditions "github.com/KirkDiggler/rpg-toolkit/mechanics/conditions"
	gomock "go.uber.org/mock/gomock"
)

// MockCondition is a mock of Condition interface.
type MockCondition struct {
	ctrl     *gomock.Controller
	recorder *MockConditionMockRecorder
	isgomock struct{}
}

// MockConditionMockRecorder is the mock recorder for MockCondition.
type MockConditionMockRecorder struct {
	mock *MockCondition
}

// NewMockCondition creates a new mock instance.
func NewMockCondition(ctrl *gomock.Controller) *MockCondition {
	mock := &MockCondition{ctrl: ctrl}
	mock.recorder = &MockConditionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCondition) EXPECT() *MockConditionMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockCondition) Apply(target core.Entity, bus events.EventBus, opts ...conditions.ApplyOption) error {
	m.ctrl.T.Helper()
	varargs := []any{target, bus}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Apply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockConditionMockRecorder) Apply(target, bus any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{target, bus}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockCondition)(nil).Apply), varargs...)
}

// Description mocks base method.
func (m *MockCondition) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockConditionMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockCondition)(nil).Description))
}

// IsActive mocks base method.
func (m *MockCondition) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockConditionMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockCondition)(nil).IsActive))
}

// IsDirty mocks base method.
func (m *MockCondition) IsDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockConditionMockRecorder) IsDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockCondition)(nil).IsDirty))
}

// MarkClean mocks base method.
func (m *MockCondition) MarkClean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkClean")
}

// MarkClean indicates an expected call of MarkClean.
func (mr *MockConditionMockRecorder) MarkClean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkClean", reflect.TypeOf((*MockCondition)(nil).MarkClean))
}

// Name mocks base method.
func (m *MockCondition) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockConditionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCondition)(nil).Name))
}

// Ref mocks base method.
func (m *MockCondition) Ref() *core.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(*core.Ref)
	return ret0
}

// Ref indicates an expected call of Ref.
func (mr *MockConditionMockRecorder) Ref() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockCondition)(nil).Ref))
}

// Remove mocks base method.
func (m *MockCondition) Remove(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockConditionMockRecorder) Remove(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockCondition)(nil).Remove), bus)
}

// Source mocks base method.
func (m *MockCondition) Source() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(string)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockConditionMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockCondition)(nil).Source))
}

// Target mocks base method.
func (m *MockCondition) Target() core.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Target")
	ret0, _ := ret[0].(core.Entity)
	return ret0
}

// Target indicates an expected call of Target.
func (mr *MockConditionMockRecorder) Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Target", reflect.TypeOf((*MockCondition)(nil).Target))
}

// ToJSON mocks base method.
func (m *MockCondition) ToJSON() (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJSON")
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJSON indicates an expected call of ToJSON.
func (mr *MockConditionMockRecorder) ToJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJSON", reflect.TypeOf((*MockCondition)(nil).ToJSON))
}
