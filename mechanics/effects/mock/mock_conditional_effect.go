// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: ConditionalEffect)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_conditional_effect.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects ConditionalEffect
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
)

// MockConditionalEffect is a mock of ConditionalEffect interface.
type MockConditionalEffect struct {
	ctrl     *gomock.Controller
	recorder *MockConditionalEffectMockRecorder
	isgomock struct{}
}

// MockConditionalEffectMockRecorder is the mock recorder for MockConditionalEffect.
type MockConditionalEffectMockRecorder struct {
	mock *MockConditionalEffect
}

// NewMockConditionalEffect creates a new mock instance.
func NewMockConditionalEffect(ctrl *gomock.Controller) *MockConditionalEffect {
	mock := &MockConditionalEffect{ctrl: ctrl}
	mock.recorder = &MockConditionalEffectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionalEffect) EXPECT() *MockConditionalEffectMockRecorder {
	return m.recorder
}

// CheckCondition mocks base method.
func (m *MockConditionalEffect) CheckCondition(ctx context.Context, event events.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCondition", ctx, event)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckCondition indicates an expected call of CheckCondition.
func (mr *MockConditionalEffectMockRecorder) CheckCondition(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCondition", reflect.TypeOf((*MockConditionalEffect)(nil).CheckCondition), ctx, event)
}
