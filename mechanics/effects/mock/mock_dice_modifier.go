// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: DiceModifier)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_dice_modifier.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects DiceModifier
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
	effects "github.com/KirkDiggler/rpg-toolkit/mechanics/effects"
)

// MockDiceModifier is a mock of DiceModifier interface.
type MockDiceModifier struct {
	ctrl     *gomock.Controller
	recorder *MockDiceModifierMockRecorder
	isgomock struct{}
}

// MockDiceModifierMockRecorder is the mock recorder for MockDiceModifier.
type MockDiceModifierMockRecorder struct {
	mock *MockDiceModifier
}

// NewMockDiceModifier creates a new mock instance.
func NewMockDiceModifier(ctrl *gomock.Controller) *MockDiceModifier {
	mock := &MockDiceModifier{ctrl: ctrl}
	mock.recorder = &MockDiceModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiceModifier) EXPECT() *MockDiceModifierMockRecorder {
	return m.recorder
}

// GetDiceExpression mocks base method.
func (m *MockDiceModifier) GetDiceExpression(ctx context.Context, event events.Event) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiceExpression", ctx, event)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDiceExpression indicates an expected call of GetDiceExpression.
func (mr *MockDiceModifierMockRecorder) GetDiceExpression(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiceExpression", reflect.TypeOf((*MockDiceModifier)(nil).GetDiceExpression), ctx, event)
}

// GetModifierType mocks base method.
func (m *MockDiceModifier) GetModifierType() effects.ModifierType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModifierType")
	ret0, _ := ret[0].(effects.ModifierType)
	return ret0
}

// GetModifierType indicates an expected call of GetModifierType.
func (mr *MockDiceModifierMockRecorder) GetModifierType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifierType", reflect.TypeOf((*MockDiceModifier)(nil).GetModifierType))
}

// ShouldApply mocks base method.
func (m *MockDiceModifier) ShouldApply(ctx context.Context, event events.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldApply", ctx, event)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldApply indicates an expected call of ShouldApply.
func (mr *MockDiceModifierMockRecorder) ShouldApply(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldApply", reflect.TypeOf((*MockDiceModifier)(nil).ShouldApply), ctx, event)
}
