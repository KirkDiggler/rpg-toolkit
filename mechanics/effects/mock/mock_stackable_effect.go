// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: StackableEffect)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_stackable_effect.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects StackableEffect
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	effects "github.com/KirkDiggler/rpg-toolkit/mechanics/effects"
)

// MockStackableEffect is a mock of StackableEffect interface.
type MockStackableEffect struct {
	ctrl     *gomock.Controller
	recorder *MockStackableEffectMockRecorder
	isgomock struct{}
}

// MockStackableEffectMockRecorder is the mock recorder for MockStackableEffect.
type MockStackableEffectMockRecorder struct {
	mock *MockStackableEffect
}

// NewMockStackableEffect creates a new mock instance.
func NewMockStackableEffect(ctrl *gomock.Controller) *MockStackableEffect {
	mock := &MockStackableEffect{ctrl: ctrl}
	mock.recorder = &MockStackableEffectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStackableEffect) EXPECT() *MockStackableEffectMockRecorder {
	return m.recorder
}

// CanStackWith mocks base method.
func (m *MockStackableEffect) CanStackWith(other core.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanStackWith", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanStackWith indicates an expected call of CanStackWith.
func (mr *MockStackableEffectMockRecorder) CanStackWith(other any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanStackWith", reflect.TypeOf((*MockStackableEffect)(nil).CanStackWith), other)
}

// GetStackingRule mocks base method.
func (m *MockStackableEffect) GetStackingRule() effects.StackingRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStackingRule")
	ret0, _ := ret[0].(effects.StackingRule)
	return ret0
}

// GetStackingRule indicates an expected call of GetStackingRule.
func (mr *MockStackableEffectMockRecorder) GetStackingRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackingRule", reflect.TypeOf((*MockStackableEffect)(nil).GetStackingRule))
}

// Stack mocks base method.
func (m *MockStackableEffect) Stack(other core.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack", other)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stack indicates an expected call of Stack.
func (mr *MockStackableEffectMockRecorder) Stack(other any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockStackableEffect)(nil).Stack), other)
}
