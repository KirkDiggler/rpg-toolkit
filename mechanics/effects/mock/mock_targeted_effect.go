// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: TargetedEffect)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_targeted_effect.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects TargetedEffect
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
)

// MockTargetedEffect is a mock of TargetedEffect interface.
type MockTargetedEffect struct {
	ctrl     *gomock.Controller
	recorder *MockTargetedEffectMockRecorder
	isgomock struct{}
}

// MockTargetedEffectMockRecorder is the mock recorder for MockTargetedEffect.
type MockTargetedEffectMockRecorder struct {
	mock *MockTargetedEffect
}

// NewMockTargetedEffect creates a new mock instance.
func NewMockTargetedEffect(ctrl *gomock.Controller) *MockTargetedEffect {
	mock := &MockTargetedEffect{ctrl: ctrl}
	mock.recorder = &MockTargetedEffectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetedEffect) EXPECT() *MockTargetedEffectMockRecorder {
	return m.recorder
}

// AddTarget mocks base method.
func (m *MockTargetedEffect) AddTarget(target core.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTarget", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTarget indicates an expected call of AddTarget.
func (mr *MockTargetedEffectMockRecorder) AddTarget(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTarget", reflect.TypeOf((*MockTargetedEffect)(nil).AddTarget), target)
}

// GetTargets mocks base method.
func (m *MockTargetedEffect) GetTargets() []core.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTargets")
	ret0, _ := ret[0].([]core.Entity)
	return ret0
}

// GetTargets indicates an expected call of GetTargets.
func (mr *MockTargetedEffectMockRecorder) GetTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTargets", reflect.TypeOf((*MockTargetedEffect)(nil).GetTargets))
}

// IsValidTarget mocks base method.
func (m *MockTargetedEffect) IsValidTarget(target core.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidTarget", target)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidTarget indicates an expected call of IsValidTarget.
func (mr *MockTargetedEffectMockRecorder) IsValidTarget(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidTarget", reflect.TypeOf((*MockTargetedEffect)(nil).IsValidTarget), target)
}

// RemoveTarget mocks base method.
func (m *MockTargetedEffect) RemoveTarget(target core.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTarget", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTarget indicates an expected call of RemoveTarget.
func (mr *MockTargetedEffectMockRecorder) RemoveTarget(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTarget", reflect.TypeOf((*MockTargetedEffect)(nil).RemoveTarget), target)
}
