// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: TemporaryEffect)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_temporary_effect.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects TemporaryEffect
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
	effects "github.com/KirkDiggler/rpg-toolkit/mechanics/effects"
)

// MockTemporaryEffect is a mock of TemporaryEffect interface.
type MockTemporaryEffect struct {
	ctrl     *gomock.Controller
	recorder *MockTemporaryEffectMockRecorder
	isgomock struct{}
}

// MockTemporaryEffectMockRecorder is the mock recorder for MockTemporaryEffect.
type MockTemporaryEffectMockRecorder struct {
	mock *MockTemporaryEffect
}

// NewMockTemporaryEffect creates a new mock instance.
func NewMockTemporaryEffect(ctrl *gomock.Controller) *MockTemporaryEffect {
	mock := &MockTemporaryEffect{ctrl: ctrl}
	mock.recorder = &MockTemporaryEffectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemporaryEffect) EXPECT() *MockTemporaryEffectMockRecorder {
	return m.recorder
}

// CheckExpiration mocks base method.
func (m *MockTemporaryEffect) CheckExpiration(ctx context.Context, currentTime time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExpiration", ctx, currentTime)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckExpiration indicates an expected call of CheckExpiration.
func (mr *MockTemporaryEffectMockRecorder) CheckExpiration(ctx, currentTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExpiration", reflect.TypeOf((*MockTemporaryEffect)(nil).CheckExpiration), ctx, currentTime)
}

// GetDuration mocks base method.
func (m *MockTemporaryEffect) GetDuration() effects.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration")
	ret0, _ := ret[0].(effects.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockTemporaryEffectMockRecorder) GetDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockTemporaryEffect)(nil).GetDuration))
}

// OnExpire mocks base method.
func (m *MockTemporaryEffect) OnExpire(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnExpire", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnExpire indicates an expected call of OnExpire.
func (mr *MockTemporaryEffectMockRecorder) OnExpire(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnExpire", reflect.TypeOf((*MockTemporaryEffect)(nil).OnExpire), bus)
}
