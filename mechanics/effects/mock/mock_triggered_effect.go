// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/effects (interfaces: TriggeredEffect)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_triggered_effect.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/effects TriggeredEffect
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
	effects "github.com/KirkDiggler/rpg-toolkit/mechanics/effects"
)

// MockTriggeredEffect is a mock of TriggeredEffect interface.
type MockTriggeredEffect struct {
	ctrl     *gomock.Controller
	recorder *MockTriggeredEffectMockRecorder
	isgomock struct{}
}

// MockTriggeredEffectMockRecorder is the mock recorder for MockTriggeredEffect.
type MockTriggeredEffectMockRecorder struct {
	mock *MockTriggeredEffect
}

// NewMockTriggeredEffect creates a new mock instance.
func NewMockTriggeredEffect(ctrl *gomock.Controller) *MockTriggeredEffect {
	mock := &MockTriggeredEffect{ctrl: ctrl}
	mock.recorder = &MockTriggeredEffectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggeredEffect) EXPECT() *MockTriggeredEffectMockRecorder {
	return m.recorder
}

// GetTriggers mocks base method.
func (m *MockTriggeredEffect) GetTriggers() []effects.TriggerCondition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers")
	ret0, _ := ret[0].([]effects.TriggerCondition)
	return ret0
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockTriggeredEffectMockRecorder) GetTriggers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockTriggeredEffect)(nil).GetTriggers))
}

// OnTrigger mocks base method.
func (m *MockTriggeredEffect) OnTrigger(ctx context.Context, event events.Event, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnTrigger", ctx, event, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnTrigger indicates an expected call of OnTrigger.
func (mr *MockTriggeredEffectMockRecorder) OnTrigger(ctx, event, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnTrigger", reflect.TypeOf((*MockTriggeredEffect)(nil).OnTrigger), ctx, event, bus)
}
