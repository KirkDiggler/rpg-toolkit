// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/features (interfaces: EventListener)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_event_listener.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/features EventListener
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	events "github.com/KirkDiggler/rpg-toolkit/events"
	features "github.com/KirkDiggler/rpg-toolkit/mechanics/features"
)

// MockEventListener is a mock of EventListener interface.
type MockEventListener struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerMockRecorder
	isgomock struct{}
}

// MockEventListenerMockRecorder is the mock recorder for MockEventListener.
type MockEventListenerMockRecorder struct {
	mock *MockEventListener
}

// NewMockEventListener creates a new mock instance.
func NewMockEventListener(ctrl *gomock.Controller) *MockEventListener {
	mock := &MockEventListener{ctrl: ctrl}
	mock.recorder = &MockEventListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventListener) EXPECT() *MockEventListenerMockRecorder {
	return m.recorder
}

// EventTypes mocks base method.
func (m *MockEventListener) EventTypes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventTypes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// EventTypes indicates an expected call of EventTypes.
func (mr *MockEventListenerMockRecorder) EventTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventTypes", reflect.TypeOf((*MockEventListener)(nil).EventTypes))
}

// HandleEvent mocks base method.
func (m *MockEventListener) HandleEvent(feature features.Feature, entity core.Entity, event events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", feature, entity, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockEventListenerMockRecorder) HandleEvent(feature, entity, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventListener)(nil).HandleEvent), feature, entity, event)
}

// Priority mocks base method.
func (m *MockEventListener) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockEventListenerMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockEventListener)(nil).Priority))
}
