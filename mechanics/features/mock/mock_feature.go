// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/features (interfaces: Feature)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_feature.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/features Feature
//

// Package mock is a generated GoMock package.
package mock

import (
	json "encoding/json"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	events "github.com/KirkDiggler/rpg-toolkit/events"
	features "github.com/KirkDiggler/rpg-toolkit/mechanics/features"
)

// MockFeature is a mock of Feature interface.
type MockFeature struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureMockRecorder
	isgomock struct{}
}

// MockFeatureMockRecorder is the mock recorder for MockFeature.
type MockFeatureMockRecorder struct {
	mock *MockFeature
}

// NewMockFeature creates a new mock instance.
func NewMockFeature(ctrl *gomock.Controller) *MockFeature {
	mock := &MockFeature{ctrl: ctrl}
	mock.recorder = &MockFeatureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeature) EXPECT() *MockFeatureMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockFeature) Activate(owner core.Entity, opts ...features.ActivateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{owner}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Activate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Activate indicates an expected call of Activate.
func (mr *MockFeatureMockRecorder) Activate(owner any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{owner}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockFeature)(nil).Activate), varargs...)
}

// Apply mocks base method.
func (m *MockFeature) Apply(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockFeatureMockRecorder) Apply(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockFeature)(nil).Apply), bus)
}

// Description mocks base method.
func (m *MockFeature) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockFeatureMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockFeature)(nil).Description))
}

// IsActive mocks base method.
func (m *MockFeature) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockFeatureMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockFeature)(nil).IsActive))
}

// IsDirty mocks base method.
func (m *MockFeature) IsDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockFeatureMockRecorder) IsDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockFeature)(nil).IsDirty))
}

// MarkClean mocks base method.
func (m *MockFeature) MarkClean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkClean")
}

// MarkClean indicates an expected call of MarkClean.
func (mr *MockFeatureMockRecorder) MarkClean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkClean", reflect.TypeOf((*MockFeature)(nil).MarkClean))
}

// Name mocks base method.
func (m *MockFeature) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFeatureMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFeature)(nil).Name))
}

// NeedsTarget mocks base method.
func (m *MockFeature) NeedsTarget() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsTarget")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsTarget indicates an expected call of NeedsTarget.
func (mr *MockFeatureMockRecorder) NeedsTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsTarget", reflect.TypeOf((*MockFeature)(nil).NeedsTarget))
}

// Ref mocks base method.
func (m *MockFeature) Ref() *core.Ref {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(*core.Ref)
	return ret0
}

// Ref indicates an expected call of Ref.
func (mr *MockFeatureMockRecorder) Ref() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockFeature)(nil).Ref))
}

// Remove mocks base method.
func (m *MockFeature) Remove(bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFeatureMockRecorder) Remove(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFeature)(nil).Remove), bus)
}

// ToJSON mocks base method.
func (m *MockFeature) ToJSON() (json.RawMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJSON")
	ret0, _ := ret[0].(json.RawMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJSON indicates an expected call of ToJSON.
func (mr *MockFeatureMockRecorder) ToJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJSON", reflect.TypeOf((*MockFeature)(nil).ToJSON))
}
