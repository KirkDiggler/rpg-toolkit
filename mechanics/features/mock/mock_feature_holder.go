// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/features (interfaces: FeatureHolder)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_feature_holder.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/features FeatureHolder
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
	features "github.com/KirkDiggler/rpg-toolkit/mechanics/features"
)

// MockFeatureHolder is a mock of FeatureHolder interface.
type MockFeatureHolder struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureHolderMockRecorder
	isgomock struct{}
}

// MockFeatureHolderMockRecorder is the mock recorder for MockFeatureHolder.
type MockFeatureHolderMockRecorder struct {
	mock *MockFeatureHolder
}

// NewMockFeatureHolder creates a new mock instance.
func NewMockFeatureHolder(ctrl *gomock.Controller) *MockFeatureHolder {
	mock := &MockFeatureHolder{ctrl: ctrl}
	mock.recorder = &MockFeatureHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureHolder) EXPECT() *MockFeatureHolderMockRecorder {
	return m.recorder
}

// ActivateFeature mocks base method.
func (m *MockFeatureHolder) ActivateFeature(key string, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateFeature", key, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateFeature indicates an expected call of ActivateFeature.
func (mr *MockFeatureHolderMockRecorder) ActivateFeature(key, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateFeature", reflect.TypeOf((*MockFeatureHolder)(nil).ActivateFeature), key, bus)
}

// AddFeature mocks base method.
func (m *MockFeatureHolder) AddFeature(feature features.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFeature", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFeature indicates an expected call of AddFeature.
func (mr *MockFeatureHolderMockRecorder) AddFeature(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeature", reflect.TypeOf((*MockFeatureHolder)(nil).AddFeature), feature)
}

// DeactivateFeature mocks base method.
func (m *MockFeatureHolder) DeactivateFeature(key string, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateFeature", key, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateFeature indicates an expected call of DeactivateFeature.
func (mr *MockFeatureHolderMockRecorder) DeactivateFeature(key, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateFeature", reflect.TypeOf((*MockFeatureHolder)(nil).DeactivateFeature), key, bus)
}

// GetActiveFeatures mocks base method.
func (m *MockFeatureHolder) GetActiveFeatures() []features.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveFeatures")
	ret0, _ := ret[0].([]features.Feature)
	return ret0
}

// GetActiveFeatures indicates an expected call of GetActiveFeatures.
func (mr *MockFeatureHolderMockRecorder) GetActiveFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveFeatures", reflect.TypeOf((*MockFeatureHolder)(nil).GetActiveFeatures))
}

// GetFeature mocks base method.
func (m *MockFeatureHolder) GetFeature(key string) (features.Feature, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", key)
	ret0, _ := ret[0].(features.Feature)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature.
func (mr *MockFeatureHolderMockRecorder) GetFeature(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockFeatureHolder)(nil).GetFeature), key)
}

// GetFeatures mocks base method.
func (m *MockFeatureHolder) GetFeatures() []features.Feature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatures")
	ret0, _ := ret[0].([]features.Feature)
	return ret0
}

// GetFeatures indicates an expected call of GetFeatures.
func (mr *MockFeatureHolderMockRecorder) GetFeatures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatures", reflect.TypeOf((*MockFeatureHolder)(nil).GetFeatures))
}

// RemoveFeature mocks base method.
func (m *MockFeatureHolder) RemoveFeature(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFeature", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFeature indicates an expected call of RemoveFeature.
func (mr *MockFeatureHolderMockRecorder) RemoveFeature(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFeature", reflect.TypeOf((*MockFeatureHolder)(nil).RemoveFeature), key)
}
