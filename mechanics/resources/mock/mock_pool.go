// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/resources (interfaces: Pool)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_pool.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/resources Pool
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
	events "github.com/KirkDiggler/rpg-toolkit/events"
	resources "github.com/KirkDiggler/rpg-toolkit/mechanics/resources"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
	isgomock struct{}
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPool) Add(resource resources.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPoolMockRecorder) Add(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPool)(nil).Add), resource)
}

// Consume mocks base method.
func (m *MockPool) Consume(key string, amount int, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", key, amount, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockPoolMockRecorder) Consume(key, amount, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockPool)(nil).Consume), key, amount, bus)
}

// ConsumeSpellSlot mocks base method.
func (m *MockPool) ConsumeSpellSlot(level int, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeSpellSlot", level, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeSpellSlot indicates an expected call of ConsumeSpellSlot.
func (mr *MockPoolMockRecorder) ConsumeSpellSlot(level, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeSpellSlot", reflect.TypeOf((*MockPool)(nil).ConsumeSpellSlot), level, bus)
}

// Get mocks base method.
func (m *MockPool) Get(key string) (resources.Resource, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPool)(nil).Get), key)
}

// GetByType mocks base method.
func (m *MockPool) GetByType(resourceType resources.ResourceType) []resources.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", resourceType)
	ret0, _ := ret[0].([]resources.Resource)
	return ret0
}

// GetByType indicates an expected call of GetByType.
func (mr *MockPoolMockRecorder) GetByType(resourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockPool)(nil).GetByType), resourceType)
}

// GetSpellSlots mocks base method.
func (m *MockPool) GetSpellSlots() map[int]resources.Resource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpellSlots")
	ret0, _ := ret[0].(map[int]resources.Resource)
	return ret0
}

// GetSpellSlots indicates an expected call of GetSpellSlots.
func (mr *MockPoolMockRecorder) GetSpellSlots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpellSlots", reflect.TypeOf((*MockPool)(nil).GetSpellSlots))
}

// Owner mocks base method.
func (m *MockPool) Owner() core.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(core.Entity)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockPoolMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockPool)(nil).Owner))
}

// ProcessLongRest mocks base method.
func (m *MockPool) ProcessLongRest(bus events.EventBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessLongRest", bus)
}

// ProcessLongRest indicates an expected call of ProcessLongRest.
func (mr *MockPoolMockRecorder) ProcessLongRest(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLongRest", reflect.TypeOf((*MockPool)(nil).ProcessLongRest), bus)
}

// ProcessRestoration mocks base method.
func (m *MockPool) ProcessRestoration(trigger string, bus events.EventBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessRestoration", trigger, bus)
}

// ProcessRestoration indicates an expected call of ProcessRestoration.
func (mr *MockPoolMockRecorder) ProcessRestoration(trigger, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRestoration", reflect.TypeOf((*MockPool)(nil).ProcessRestoration), trigger, bus)
}

// ProcessShortRest mocks base method.
func (m *MockPool) ProcessShortRest(bus events.EventBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessShortRest", bus)
}

// ProcessShortRest indicates an expected call of ProcessShortRest.
func (mr *MockPoolMockRecorder) ProcessShortRest(bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessShortRest", reflect.TypeOf((*MockPool)(nil).ProcessShortRest), bus)
}

// Remove mocks base method.
func (m *MockPool) Remove(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPoolMockRecorder) Remove(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPool)(nil).Remove), key)
}

// Restore mocks base method.
func (m *MockPool) Restore(key string, amount int, reason string, bus events.EventBus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", key, amount, reason, bus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockPoolMockRecorder) Restore(key, amount, reason, bus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPool)(nil).Restore), key, amount, reason, bus)
}
