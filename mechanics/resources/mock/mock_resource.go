// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/resources (interfaces: Resource)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_resource.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/resources Resource
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	core "github.com/KirkDiggler/rpg-toolkit/core"
)

// MockResource is a mock of Resource interface.
type MockResource struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMockRecorder
	isgomock struct{}
}

// MockResourceMockRecorder is the mock recorder for MockResource.
type MockResourceMockRecorder struct {
	mock *MockResource
}

// NewMockResource creates a new mock instance.
func NewMockResource(ctrl *gomock.Controller) *MockResource {
	mock := &MockResource{ctrl: ctrl}
	mock.recorder = &MockResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResource) EXPECT() *MockResourceMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockResource) Consume(amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockResourceMockRecorder) Consume(amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockResource)(nil).Consume), amount)
}

// Current mocks base method.
func (m *MockResource) Current() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockResourceMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockResource)(nil).Current))
}

// GetID mocks base method.
func (m *MockResource) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockResourceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockResource)(nil).GetID))
}

// GetType mocks base method.
func (m *MockResource) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockResourceMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockResource)(nil).GetType))
}

// IsAvailable mocks base method.
func (m *MockResource) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockResourceMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockResource)(nil).IsAvailable))
}

// Key mocks base method.
func (m *MockResource) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockResourceMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockResource)(nil).Key))
}

// Maximum mocks base method.
func (m *MockResource) Maximum() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Maximum")
	ret0, _ := ret[0].(int)
	return ret0
}

// Maximum indicates an expected call of Maximum.
func (mr *MockResourceMockRecorder) Maximum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Maximum", reflect.TypeOf((*MockResource)(nil).Maximum))
}

// Owner mocks base method.
func (m *MockResource) Owner() core.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(core.Entity)
	return ret0
}

// Owner indicates an expected call of Owner.
func (mr *MockResourceMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockResource)(nil).Owner))
}

// Restore mocks base method.
func (m *MockResource) Restore(amount int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restore", amount)
}

// Restore indicates an expected call of Restore.
func (mr *MockResourceMockRecorder) Restore(amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockResource)(nil).Restore), amount)
}

// RestoreOnLongRest mocks base method.
func (m *MockResource) RestoreOnLongRest() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreOnLongRest")
	ret0, _ := ret[0].(int)
	return ret0
}

// RestoreOnLongRest indicates an expected call of RestoreOnLongRest.
func (mr *MockResourceMockRecorder) RestoreOnLongRest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreOnLongRest", reflect.TypeOf((*MockResource)(nil).RestoreOnLongRest))
}

// RestoreOnShortRest mocks base method.
func (m *MockResource) RestoreOnShortRest() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreOnShortRest")
	ret0, _ := ret[0].(int)
	return ret0
}

// RestoreOnShortRest indicates an expected call of RestoreOnShortRest.
func (mr *MockResourceMockRecorder) RestoreOnShortRest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreOnShortRest", reflect.TypeOf((*MockResource)(nil).RestoreOnShortRest))
}

// RestoreOnTrigger mocks base method.
func (m *MockResource) RestoreOnTrigger(trigger string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreOnTrigger", trigger)
	ret0, _ := ret[0].(int)
	return ret0
}

// RestoreOnTrigger indicates an expected call of RestoreOnTrigger.
func (mr *MockResourceMockRecorder) RestoreOnTrigger(trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreOnTrigger", reflect.TypeOf((*MockResource)(nil).RestoreOnTrigger), trigger)
}

// SetCurrent mocks base method.
func (m *MockResource) SetCurrent(value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrent", value)
}

// SetCurrent indicates an expected call of SetCurrent.
func (mr *MockResourceMockRecorder) SetCurrent(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrent", reflect.TypeOf((*MockResource)(nil).SetCurrent), value)
}

// SetMaximum mocks base method.
func (m *MockResource) SetMaximum(value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaximum", value)
}

// SetMaximum indicates an expected call of SetMaximum.
func (mr *MockResourceMockRecorder) SetMaximum(value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaximum", reflect.TypeOf((*MockResource)(nil).SetMaximum), value)
}
