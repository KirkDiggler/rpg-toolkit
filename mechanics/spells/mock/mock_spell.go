// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/spells (interfaces: Spell)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_spell.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/spells Spell
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	events "github.com/KirkDiggler/rpg-toolkit/events"
	spells "github.com/KirkDiggler/rpg-toolkit/mechanics/spells"
)

// MockSpell is a mock of Spell interface.
type MockSpell struct {
	ctrl     *gomock.Controller
	recorder *MockSpellMockRecorder
	isgomock struct{}
}

// MockSpellMockRecorder is the mock recorder for MockSpell.
type MockSpellMockRecorder struct {
	mock *MockSpell
}

// NewMockSpell creates a new mock instance.
func NewMockSpell(ctrl *gomock.Controller) *MockSpell {
	mock := &MockSpell{ctrl: ctrl}
	mock.recorder = &MockSpellMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpell) EXPECT() *MockSpellMockRecorder {
	return m.recorder
}

// AreaOfEffect mocks base method.
func (m *MockSpell) AreaOfEffect() *spells.AreaOfEffect {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AreaOfEffect")
	ret0, _ := ret[0].(*spells.AreaOfEffect)
	return ret0
}

// AreaOfEffect indicates an expected call of AreaOfEffect.
func (mr *MockSpellMockRecorder) AreaOfEffect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AreaOfEffect", reflect.TypeOf((*MockSpell)(nil).AreaOfEffect))
}

// CanBeUpcast mocks base method.
func (m *MockSpell) CanBeUpcast() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanBeUpcast")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanBeUpcast indicates an expected call of CanBeUpcast.
func (mr *MockSpellMockRecorder) CanBeUpcast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanBeUpcast", reflect.TypeOf((*MockSpell)(nil).CanBeUpcast))
}

// Cast mocks base method.
func (m *MockSpell) Cast(context spells.CastContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cast", context)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cast indicates an expected call of Cast.
func (mr *MockSpellMockRecorder) Cast(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cast", reflect.TypeOf((*MockSpell)(nil).Cast), context)
}

// CastingTime mocks base method.
func (m *MockSpell) CastingTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CastingTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// CastingTime indicates an expected call of CastingTime.
func (mr *MockSpellMockRecorder) CastingTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CastingTime", reflect.TypeOf((*MockSpell)(nil).CastingTime))
}

// Components mocks base method.
func (m *MockSpell) Components() spells.CastingComponents {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Components")
	ret0, _ := ret[0].(spells.CastingComponents)
	return ret0
}

// Components indicates an expected call of Components.
func (mr *MockSpellMockRecorder) Components() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Components", reflect.TypeOf((*MockSpell)(nil).Components))
}

// Description mocks base method.
func (m *MockSpell) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockSpellMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockSpell)(nil).Description))
}

// Duration mocks base method.
func (m *MockSpell) Duration() events.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(events.Duration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockSpellMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockSpell)(nil).Duration))
}

// GetID mocks base method.
func (m *MockSpell) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockSpellMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockSpell)(nil).GetID))
}

// GetType mocks base method.
func (m *MockSpell) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockSpellMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockSpell)(nil).GetType))
}

// IsRitual mocks base method.
func (m *MockSpell) IsRitual() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRitual")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRitual indicates an expected call of IsRitual.
func (mr *MockSpellMockRecorder) IsRitual() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRitual", reflect.TypeOf((*MockSpell)(nil).IsRitual))
}

// Level mocks base method.
func (m *MockSpell) Level() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level")
	ret0, _ := ret[0].(int)
	return ret0
}

// Level indicates an expected call of Level.
func (mr *MockSpellMockRecorder) Level() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockSpell)(nil).Level))
}

// MaxTargets mocks base method.
func (m *MockSpell) MaxTargets() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxTargets")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxTargets indicates an expected call of MaxTargets.
func (mr *MockSpellMockRecorder) MaxTargets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxTargets", reflect.TypeOf((*MockSpell)(nil).MaxTargets))
}

// Range mocks base method.
func (m *MockSpell) Range() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Range")
	ret0, _ := ret[0].(int)
	return ret0
}

// Range indicates an expected call of Range.
func (mr *MockSpellMockRecorder) Range() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockSpell)(nil).Range))
}

// RequiresConcentration mocks base method.
func (m *MockSpell) RequiresConcentration() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiresConcentration")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RequiresConcentration indicates an expected call of RequiresConcentration.
func (mr *MockSpellMockRecorder) RequiresConcentration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresConcentration", reflect.TypeOf((*MockSpell)(nil).RequiresConcentration))
}

// School mocks base method.
func (m *MockSpell) School() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "School")
	ret0, _ := ret[0].(string)
	return ret0
}

// School indicates an expected call of School.
func (mr *MockSpellMockRecorder) School() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "School", reflect.TypeOf((*MockSpell)(nil).School))
}

// TargetType mocks base method.
func (m *MockSpell) TargetType() spells.TargetType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetType")
	ret0, _ := ret[0].(spells.TargetType)
	return ret0
}

// TargetType indicates an expected call of TargetType.
func (mr *MockSpellMockRecorder) TargetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetType", reflect.TypeOf((*MockSpell)(nil).TargetType))
}
