// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/spells (interfaces: SpellList)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_spell_list.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/spells SpellList
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	spells "github.com/KirkDiggler/rpg-toolkit/mechanics/spells"
)

// MockSpellList is a mock of SpellList interface.
type MockSpellList struct {
	ctrl     *gomock.Controller
	recorder *MockSpellListMockRecorder
	isgomock struct{}
}

// MockSpellListMockRecorder is the mock recorder for MockSpellList.
type MockSpellListMockRecorder struct {
	mock *MockSpellList
}

// NewMockSpellList creates a new mock instance.
func NewMockSpellList(ctrl *gomock.Controller) *MockSpellList {
	mock := &MockSpellList{ctrl: ctrl}
	mock.recorder = &MockSpellListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpellList) EXPECT() *MockSpellListMockRecorder {
	return m.recorder
}

// AddCantrip mocks base method.
func (m *MockSpellList) AddCantrip(spell spells.Spell) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCantrip", spell)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCantrip indicates an expected call of AddCantrip.
func (mr *MockSpellListMockRecorder) AddCantrip(spell any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCantrip", reflect.TypeOf((*MockSpellList)(nil).AddCantrip), spell)
}

// AddKnownSpell mocks base method.
func (m *MockSpellList) AddKnownSpell(spell spells.Spell) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKnownSpell", spell)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddKnownSpell indicates an expected call of AddKnownSpell.
func (mr *MockSpellListMockRecorder) AddKnownSpell(spell any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnownSpell", reflect.TypeOf((*MockSpellList)(nil).AddKnownSpell), spell)
}

// CanCast mocks base method.
func (m *MockSpellList) CanCast(spellID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanCast", spellID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanCast indicates an expected call of CanCast.
func (mr *MockSpellListMockRecorder) CanCast(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanCast", reflect.TypeOf((*MockSpellList)(nil).CanCast), spellID)
}

// GetCantrips mocks base method.
func (m *MockSpellList) GetCantrips() []spells.Spell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCantrips")
	ret0, _ := ret[0].([]spells.Spell)
	return ret0
}

// GetCantrips indicates an expected call of GetCantrips.
func (mr *MockSpellListMockRecorder) GetCantrips() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCantrips", reflect.TypeOf((*MockSpellList)(nil).GetCantrips))
}

// GetKnownSpells mocks base method.
func (m *MockSpellList) GetKnownSpells() []spells.Spell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKnownSpells")
	ret0, _ := ret[0].([]spells.Spell)
	return ret0
}

// GetKnownSpells indicates an expected call of GetKnownSpells.
func (mr *MockSpellListMockRecorder) GetKnownSpells() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKnownSpells", reflect.TypeOf((*MockSpellList)(nil).GetKnownSpells))
}

// GetPreparedSpells mocks base method.
func (m *MockSpellList) GetPreparedSpells() []spells.Spell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreparedSpells")
	ret0, _ := ret[0].([]spells.Spell)
	return ret0
}

// GetPreparedSpells indicates an expected call of GetPreparedSpells.
func (mr *MockSpellListMockRecorder) GetPreparedSpells() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreparedSpells", reflect.TypeOf((*MockSpellList)(nil).GetPreparedSpells))
}

// GetSpell mocks base method.
func (m *MockSpellList) GetSpell(spellID string) (spells.Spell, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpell", spellID)
	ret0, _ := ret[0].(spells.Spell)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSpell indicates an expected call of GetSpell.
func (mr *MockSpellListMockRecorder) GetSpell(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpell", reflect.TypeOf((*MockSpellList)(nil).GetSpell), spellID)
}

// IsKnown mocks base method.
func (m *MockSpellList) IsKnown(spellID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKnown", spellID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKnown indicates an expected call of IsKnown.
func (mr *MockSpellListMockRecorder) IsKnown(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKnown", reflect.TypeOf((*MockSpellList)(nil).IsKnown), spellID)
}

// IsPrepared mocks base method.
func (m *MockSpellList) IsPrepared(spellID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPrepared", spellID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPrepared indicates an expected call of IsPrepared.
func (mr *MockSpellListMockRecorder) IsPrepared(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPrepared", reflect.TypeOf((*MockSpellList)(nil).IsPrepared), spellID)
}

// MaxPreparedSpells mocks base method.
func (m *MockSpellList) MaxPreparedSpells() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPreparedSpells")
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxPreparedSpells indicates an expected call of MaxPreparedSpells.
func (mr *MockSpellListMockRecorder) MaxPreparedSpells() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPreparedSpells", reflect.TypeOf((*MockSpellList)(nil).MaxPreparedSpells))
}

// PrepareSpell mocks base method.
func (m *MockSpellList) PrepareSpell(spell spells.Spell) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareSpell", spell)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareSpell indicates an expected call of PrepareSpell.
func (mr *MockSpellListMockRecorder) PrepareSpell(spell any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSpell", reflect.TypeOf((*MockSpellList)(nil).PrepareSpell), spell)
}

// RemoveKnownSpell mocks base method.
func (m *MockSpellList) RemoveKnownSpell(spellID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnownSpell", spellID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKnownSpell indicates an expected call of RemoveKnownSpell.
func (mr *MockSpellListMockRecorder) RemoveKnownSpell(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnownSpell", reflect.TypeOf((*MockSpellList)(nil).RemoveKnownSpell), spellID)
}

// UnprepareSpell mocks base method.
func (m *MockSpellList) UnprepareSpell(spellID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnprepareSpell", spellID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnprepareSpell indicates an expected call of UnprepareSpell.
func (mr *MockSpellListMockRecorder) UnprepareSpell(spellID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprepareSpell", reflect.TypeOf((*MockSpellList)(nil).UnprepareSpell), spellID)
}
