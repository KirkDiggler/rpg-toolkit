// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KirkDiggler/rpg-toolkit/mechanics/spells (interfaces: SpellSlotTable)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_spell_slot_table.go -package=mock github.com/KirkDiggler/rpg-toolkit/mechanics/spells SpellSlotTable
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSpellSlotTable is a mock of SpellSlotTable interface.
type MockSpellSlotTable struct {
	ctrl     *gomock.Controller
	recorder *MockSpellSlotTableMockRecorder
	isgomock struct{}
}

// MockSpellSlotTableMockRecorder is the mock recorder for MockSpellSlotTable.
type MockSpellSlotTableMockRecorder struct {
	mock *MockSpellSlotTable
}

// NewMockSpellSlotTable creates a new mock instance.
func NewMockSpellSlotTable(ctrl *gomock.Controller) *MockSpellSlotTable {
	mock := &MockSpellSlotTable{ctrl: ctrl}
	mock.recorder = &MockSpellSlotTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpellSlotTable) EXPECT() *MockSpellSlotTableMockRecorder {
	return m.recorder
}

// GetSlots mocks base method.
func (m *MockSpellSlotTable) GetSlots(classLevel, spellLevel int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlots", classLevel, spellLevel)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSlots indicates an expected call of GetSlots.
func (mr *MockSpellSlotTableMockRecorder) GetSlots(classLevel, spellLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlots", reflect.TypeOf((*MockSpellSlotTable)(nil).GetSlots), classLevel, spellLevel)
}
